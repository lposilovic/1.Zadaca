#region Using Statements
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Storage;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Media;
using ConsoleApplication4;
#endregion

namespace Igra
{

    public class CollisionDetector
    {
        /// <summary>
        /// Calculates if rectangles describing two sprites
        /// are overlapping on screen.
        /// </summary>
        /// <param name="s1">First sprite</param>
        /// <param name="s2">Second sprite</param>
        /// <returns>Returns true if overlapping</returns>
        public static bool Overlaps(Sprite s1, Sprite s2)
        {
            if (
                (
                s1.Position.Y <= 10
                && s1.Position.X <= (s2.Position.X + s2.Size.Width/2)
                && s1.Position.X > (s2.Position.X - s2.Size.Width/2)
                )
                ||
                (
                s1.Position.Y >= 430
                && s1.Position.X <= (s2.Position.X + s2.Size.Width/2)
                && s1.Position.X > (s2.Position.X - s2.Size.Width/2)
                )
               )
                return true;
            else
                return false;
        }
    }

    public abstract class Sprite
    {
        /// <summary>
        /// Represents size of the Sprite on the screen (in pixels).
        /// Rectangle type is defined in Monogame framework.
        /// </summary>
        public Rectangle Size;
        /// <summary>
        /// Represents position of the Sprite on the screen
        /// Vector2 is two-dimensional vector (X and Y component)
        /// defined in Monogame framework.
        /// </summary>
        public Vector2 Position;
        /// <summary>
        /// Represents the texture of the Sprite on the screen.
        /// Texture2D is a type defined in Monogame framework.
        /// </summary>
        public Texture2D Texture { get; set; }
        protected Sprite(Texture2D spriteTexture, int width, int height)
        {
            Texture = spriteTexture;
            Size = new Rectangle(0, 0, width, height);
            Position = new Vector2(0, 0);
        }
        /// <summary>
        /// Base draw method
        /// </summary>
        public virtual void Draw(SpriteBatch spriteBatch)
        {
            spriteBatch.Draw(Texture, Position, Size, Color.White);
        }
    }

    public class Background : Sprite
    {
        public Background(Texture2D spriteTexture, int width, int height)
            : base(spriteTexture, width, height)
        {
        }
    }

    public class Ball : Sprite
    {
        /// <summary>
        /// Initial ball speed. Constant
        /// </summary>
        public const float InitialSpeed = 0.4f;
        /// <summary>
        /// Defines a factor of speed increase when bumping on the paddle.
        /// Constant
        /// </summary>
        public const float BumpSpeedIncreaseFactor = 1.01f;
        /// <summary>
        /// Defines ball size. Constant
        /// </summary>
        public const int BallSize = 50;
        /// <summary>
        /// Defines current ball speed in time.
        /// </summary>
        public float Speed { get; set; }
        /// <summary>
        /// Defines ball direction.
        /// Valid values (-1,-1), (1,1), (1,-1), (-1,1).
        /// Using Vector2 to simplify game calculation. Potentially
        /// dangerous because vector 2 can swallow other values as well.
        /// Think about creating your own, more suitable type.
        /// </summary>
        public Vector2 Direction;
        public Ball(Texture2D spriteTexture)
            : base(spriteTexture, BallSize, BallSize)
        {
            Speed = InitialSpeed;
            // Initial direction
            Direction = new Vector2(1, 1);
        }
    }

    public class Paddle : Sprite
    {
        /// <summary>
        /// Initial paddle speed. Constant
        /// </summary>
        private const float InitialSpeed = 0.9f;
        /// <summary>
        /// Paddle height. Constant
        /// </summary>
        private const int PaddleHeight = 20;
        /// <summary>
        /// Paddle width. Constant
        /// </summary>
        private const int PaddleWidth = 200;
        /// <summary>
        /// Current paddle speed in time
        /// </summary>
        public float Speed { get; set; }
        public Paddle(Texture2D spriteTexture)
            : base(spriteTexture, PaddleWidth, PaddleHeight)
        {
            Speed = InitialSpeed;
        }
        /// <summary>
        /// Overriding draw method. Masking paddle texture with black color.
        /// </summary>
        /// <param name="spriteBatch"></param>
        public override void Draw(SpriteBatch spriteBatch)
        {
            spriteBatch.Draw(Texture, Position, Size, Color.Black);
        }
    }



    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        /// <summary>
        /// Bottom paddle object
        /// </summary>
        public Paddle PaddleBottom { get; private set; }
        /// <summary>
        /// Top paddle object
        /// </summary>
        public Paddle PaddleTop { get; private set; }
        /// <summary>
        /// Ball object
        /// </summary>
        public Ball Ball { get; private set; }
        /// <summary>
        /// Background image
        /// </summary>
        public Background Background { get; private set; }
        /// <summary>
        /// Sound when ball hits an obstacle.
        /// SoundEffect is a type defined in Monogame framework
        /// </summary>
        public SoundEffect HitSound { get; private set; }
        /// <summary>
        /// Background music. Song is a type defined in Monogame framework
        /// </summary>
        public Song Music { get; private set; }
        /// <summary>
        /// Generic list that holds Sprites that should be drawn on screen
        /// </summary>
        private IGenericList<Sprite> SpritesForDrawList = new GenericList<Sprite>();

        public Game1()
            : base()
        {
            graphics = new GraphicsDeviceManager(this)
            {
                PreferredBackBufferHeight = 500,
                PreferredBackBufferWidth = 800
            };
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Initialize new SpriteBatch object which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            // Ask graphics device about screen bounds we are using.
            var screenBounds = GraphicsDevice.Viewport.Bounds;
            // Load paddle texture using Content.Load static method
            Content.RootDirectory = "Content";
            Texture2D paddleTexture = Content.Load<Texture2D>("paddle.jpg");
            // Create bottom and top paddles and set their initial position
            PaddleBottom = new Paddle(paddleTexture);
            PaddleTop = new Paddle(paddleTexture);
            // Position both paddles with help screenBounds object
            PaddleBottom.Position = new Vector2(250, 480);
            PaddleTop.Position = new Vector2(250, 0);
            // Load ball texture
            Texture2D ballTexture = Content.Load<Texture2D>("ball.png");

            // Create new ball object and set its initial position
            Ball = new Ball(ballTexture);
            Ball.Position = screenBounds.Center.ToVector2();
            // Load background texture and create a new background object.
            Texture2D backgroundTexture = Content.Load<Texture2D>("background.png");
            Background = new Background(backgroundTexture, screenBounds.Width,
            screenBounds.Height);

            // I have 32-bit windows and music doesn't seem to be working on it
            //Load sounds
            //HitSound = Content.Load<SoundEffect>("hit");
            //Music = Content.Load<Song>("music");
            //MediaPlayer.IsRepeating = true;
            //Start playing background music
            //MediaPlayer.Play(Music);
            //
            SpritesForDrawList.Add(Background);
            SpritesForDrawList.Add(PaddleBottom);
            SpritesForDrawList.Add(PaddleTop);
            SpritesForDrawList.Add(Ball);

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            base.Update(gameTime);

            var touchState = Keyboard.GetState();
            if (touchState.IsKeyDown(Keys.Left))
            {
                PaddleBottom.Position.X -= (float)(PaddleBottom.Speed *
                gameTime.ElapsedGameTime.TotalMilliseconds);
            }
            if (touchState.IsKeyDown(Keys.Right))
            {
                PaddleBottom.Position.X += (float)(PaddleBottom.Speed *
                gameTime.ElapsedGameTime.TotalMilliseconds);
            }

            if (touchState.IsKeyDown(Keys.A))
            {
                PaddleTop.Position.X -= (float)(PaddleBottom.Speed *
                gameTime.ElapsedGameTime.TotalMilliseconds);
            }
            if (touchState.IsKeyDown(Keys.D))
            {
                PaddleTop.Position.X += (float)(PaddleBottom.Speed *
                gameTime.ElapsedGameTime.TotalMilliseconds);
            }

            PaddleBottom.Position.X = MathHelper.Clamp(PaddleBottom.Position.X,
             graphics.GraphicsDevice.Viewport.Bounds.Left,
             graphics.GraphicsDevice.Viewport.Bounds.Right - PaddleBottom.Size.Width);

            PaddleTop.Position.X = MathHelper.Clamp(PaddleTop.Position.X,
             graphics.GraphicsDevice.Viewport.Bounds.Left,
             graphics.GraphicsDevice.Viewport.Bounds.Right - PaddleTop.Size.Width);

            // Move ball
            Ball.Position += Ball.Direction *
           (float)(gameTime.ElapsedGameTime.TotalMilliseconds * Ball.Speed);
            // Walls
            var bounds = graphics.GraphicsDevice.Viewport.Bounds;
            if (Ball.Position.X < bounds.Left || Ball.Position.X > bounds.Right -
            Ball.Size.Width)
            {
                Ball.Direction.X = -Ball.Direction.X;
                Ball.Speed = Ball.Speed * Ball.BumpSpeedIncreaseFactor;
            }

            // Reset ball
            if (Ball.Position.Y > bounds.Bottom || Ball.Position.Y < bounds.Top)
            {
                Ball.Position = bounds.Center.ToVector2();
                Ball.Speed = Ball.InitialSpeed;
            }

            if (CollisionDetector.Overlaps(Ball,PaddleTop) && Ball.Direction.Y < 0
            || (CollisionDetector.Overlaps(Ball,PaddleBottom) && Ball.Direction.Y > 0))
            {
                Ball.Direction.Y = -Ball.Direction.Y;
                Ball.Speed *= Ball.BumpSpeedIncreaseFactor;
            }

            // Reset ball
            if (Ball.Position.Y > bounds.Bottom || Ball.Position.Y < bounds.Top)
            {
                Ball.Position = bounds.Center.ToVector2();
                Ball.Speed = Ball.InitialSpeed;
            }

            // TODO: Add your update logic here
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);
            // Start drawing.
            spriteBatch.Begin();
            for (int i = 0; i < SpritesForDrawList.Count; i++)
            {
                SpritesForDrawList.GetElement(i).Draw(spriteBatch);
            }
            // End drawing.
            // Send all gathered details to the graphic card in one batch.
            spriteBatch.End();
            base.Draw(gameTime);

            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }
    }
}
